pipeline {
    agent any

    environment {
        SERVICE_NAME='notification-service'
        DOCKERHUB_CREDENTIALS = credentials('docker-creds')
        DOCKERHUB_USERNAME = 'thenoobgrammer'
        REPO_BASE = 'pickside-service'
        TAG = 'latest'
        VAULT_ADDRESS = credentials('vault-address')
        VAULT_TOKEN = credentials('vault-token') 
        SERVER_HOST = 'ubuntu@ec2-34-225-177-141.compute-1.amazonaws.com'
        PLATFORM = 'linux/amd64'
    }

    stages {
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        stage('Build and Push') {
            steps {
                script {
                    dir("../deploy-${SERVICE_NAME}") {
                        sh """
                            docker build -t ${DOCKERHUB_USERNAME}/pickside-service:${SERVICE_NAME}-${TAG} .
                            docker push ${DOCKERHUB_USERNAME}/pickside-service:${SERVICE_NAME}-${TAG}
                        """
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh """
                        docker rmi ${DOCKERHUB_USERNAME}/${REPO_BASE}:${SERVICE_NAME}-${TAG} || true
                    """
                }
            }
        }
        stage('Restarting service') {
            steps {
                script {
                    sshagent(['ec2-ssh-access-key']) {
                        sh """
                            echo "Checking loaded SSH keys..."
                            ssh-add -L
                            echo "Connecting to server..."
                            ssh -o StrictHostKeyChecking=no ${SERVER_HOST} "
                                docker ps -q --filter 'name=!vault' | xargs -r docker stop

                                echo 'Pulling latest images for external service...';
                                docker pull thenoobgrammer/pickside-service:${SERVICE_NAME}-latest;

                                echo 'Removing old container...';
                                docker rm -f pickside-${SERVICE_NAME}-prod;

                                echo 'Running new container...';
                                docker run -d \
                                    -e VAULT_TOKEN=${VAULT_TOKEN} \
                                    -e VAULT_ADDRESS=${VAULT_ADDRESS} \
                                    -e AUTHENTICATION_SERVICE_BASE_URL=https://pickside-service.com/auth-service \
                                    --name pickside-${SERVICE_NAME}-prod \
                                    -p 8084:8084 \
                                    ${DOCKERHUB_USERNAME}/${REPO_BASE}:${SERVICE_NAME}-latest;
                            "
                        """
                    }
                }
            }
        }
    }
}
